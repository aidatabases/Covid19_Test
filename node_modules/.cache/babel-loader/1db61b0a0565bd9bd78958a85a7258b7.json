{"ast":null,"code":"var _jsxFileName = \"/home/dhakad/Documents/AI/FF/Frontend_Test/src/views/examples/WorldMap.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport { select, scaleLinear } from \"d3\";\nimport * as d3 from 'd3'; //import {d3tip} from \"d3-tip\"\n\nconst projection = d3.geoMercator().scale(1000).translate([-1000, 700]);\n\nconst WorldMap = props => {\n  const [geographies, setGeographies] = useState([]);\n  useEffect(() => {\n    fetch(\"/india.json\").then(response => {\n      if (response.status !== 200) {\n        console.log(`There was a problem: ${response.status}`);\n        return;\n      }\n\n      response.json().then(worlddata => {\n        let x = feature(worlddata, worlddata.objects.india).features;\n        setGeographies(x);\n      });\n    });\n  }, [props.data]);\n  useEffect(() => {\n    var data = props.data;\n    var cmin = 10000000,\n        cmax = 0;\n\n    for (let i in data) {\n      if (i != \"Total\") {\n        if (data[i] < cmin) cmin = data[i];\n\n        if (data[i] > cmax) {\n          cmax = data[i];\n        }\n      }\n    }\n\n    var colorScale = scaleLinear().domain([cmin, cmax]).range([\"#D4EEFF\", \"#0099FF\"]);\n    const mystyle = {\n      color: \"white\",\n      backgroundColor: \"DodgerBlue\",\n      padding: \"10px\",\n      fontFamily: \"Arial\"\n    };\n    var svg = select(\".mapsvg\");\n    var states = svg.selectAll(\".countries\").data(geographies).enter();\n    var mState = states.append(\"path\").attr(\"d\", (d, i) => {\n      return geoPath().projection(projection)(d);\n    }).attr(\"fill\", (d, i) => {\n      var country = d.properties.st_nm;\n      var val = props.data[country];\n      console.log(country, val);\n      return colorScale(val);\n    }).attr(\"stroke\", \" #000000\"); // .append(\"rect\").attr(\"width\",50).attr(\"x\",30).attr(\"y\",40).attr(\"height\",60).attr(\"fill\",\"red\")\n\n    var tooltip = svg.append(\"g\").attr(\"class\", \"ttip\");\n    var bg = tooltip.append(\"rect\");\n    var txt = tooltip.append(\"text\").attr(\"x\", 50).attr(\"y\", 70);\n    mState.attr(\"class\", (d, i) => {\n      return \"mystate\" + i;\n    });\n    mState.on(\"mouseover\", (d, i, e) => {\n      //svg.call(tip)\n      var mstate = d.properties.st_nm;\n      select(\".mapsvg\").selectAll(\".mystate\" + i).attr(\"fill\", \"#00c3ff\"); //console.log(i,e,\".mystate\"+i,event.pageX,event.pageY)\n\n      return tooltip.style(\"visibility\", \"visible\");\n    }).on(\"mouseout\", (d, i, e) => {\n      select(\".mapsvg\").selectAll(\".mystate\" + i).attr(\"fill\", d => colorScale(props.data[d.properties.st_nm]));\n      return tooltip.style(\"visibility\", \"hidden\");\n    }).on(\"mousemove\", function (d) {\n      console.log(\"mov\", d.properties.st_nm);\n      txt.text(d.properties.st_nm + \":\" + data[d.properties.st_nm]);\n      bg.attr(\"x\", () => {\n        return window.event.pageX - 835;\n      }).attr(\"y\", d => {\n        return window.event.pageY - 200;\n      }).attr(\"width\", 180).attr(\"height\", 30).attr(\"fill\", \"silver\");\n      txt.attr(\"x\", () => {\n        return window.event.pageX - 825;\n      }).attr(\"y\", d => {\n        return window.event.pageY - 180;\n      });\n    });\n  }, [geographies]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"60vw\",\n      height: \"600\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    className: \"mapsvg\",\n    width: \"60vw\",\n    height: \"600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    className: \"countries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, \" \")));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/home/dhakad/Documents/AI/FF/Frontend_Test/src/views/examples/WorldMap.js"],"names":["React","useState","useEffect","geoEqualEarth","geoPath","feature","select","scaleLinear","d3","projection","geoMercator","scale","translate","WorldMap","props","geographies","setGeographies","fetch","then","response","status","console","log","json","worlddata","x","objects","india","features","data","cmin","cmax","i","colorScale","domain","range","mystyle","color","backgroundColor","padding","fontFamily","svg","states","selectAll","enter","mState","append","attr","d","country","properties","st_nm","val","tooltip","bg","txt","on","e","mstate","style","text","window","event","pageX","pageY","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { feature } from \"topojson-client\"\nimport {select,scaleLinear}  from \"d3\"\nimport * as d3 from 'd3'\n//import {d3tip} from \"d3-tip\"\n\n\n\n\nconst projection = d3.geoMercator()\n  .scale(1000)\n  .translate([ -1000,700])\n\nconst WorldMap = (props) => {\n\n\n  const [geographies, setGeographies] = useState([])\n    \n  useEffect(() => {\n    fetch(\"/india.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          let x = feature(worlddata, worlddata.objects.india).features\n          setGeographies(x)\n        })\n        \n      })\n    \n    }, [props.data])\n\n    useEffect(() => {\n      var data=props.data\n      var cmin=10000000,cmax=0;\n\n      for(let i in data){\n        if(i!=\"Total\"){\n        if(data[i] < cmin)\n         cmin=data[i];\n        \n         if(data[i]>cmax){\n           cmax=data[i]\n         }\n      }\n    }\n\n      var colorScale= scaleLinear()\n    .domain([cmin, cmax])\n    .range([\"#D4EEFF\", \"#0099FF\"]);\n\n    const mystyle = {\n      color: \"white\",\n      backgroundColor: \"DodgerBlue\",\n      padding: \"10px\",\n      fontFamily: \"Arial\"\n    };\n\n    var svg = select(\".mapsvg\");\n    \n   var states = svg.selectAll(\".countries\")\n                .data(geographies)\n                .enter()\n\n        var mState = states.append(\"path\").attr(\"d\",(d,i)=>{return geoPath().projection(projection)(d)})\n                .attr(\"fill\",(d,i)=>{ var country = d.properties.st_nm\n                  var val = props.data[country];\n                  console.log(country,val);\n                   return colorScale(val)} )\n                .attr(\"stroke\",\" #000000\")\n                // .append(\"rect\").attr(\"width\",50).attr(\"x\",30).attr(\"y\",40).attr(\"height\",60).attr(\"fill\",\"red\")\n                var tooltip =svg.append(\"g\").attr(\"class\",\"ttip\")\n                var bg =tooltip.append(\"rect\")\n\n                var txt=tooltip.append(\"text\").attr(\"x\",50).attr(\"y\",70);\n\n                  mState.attr(\"class\",(d,i)=>{ return \"mystate\"+i})\n\n                mState.on(\"mouseover\",(d,i,e)=>{ \n                  //svg.call(tip)\n                  var mstate = d.properties.st_nm\n                  select(\".mapsvg\").selectAll(\".mystate\"+i).attr(\"fill\",\"#00c3ff\")\n                  //console.log(i,e,\".mystate\"+i,event.pageX,event.pageY)\n                  return tooltip.style(\"visibility\", \"visible\");\n                })\n                .on(\"mouseout\",(d,i,e)=>{                   \n                  select(\".mapsvg\").selectAll(\".mystate\"+i).attr(\"fill\",(d)=>(colorScale(props.data[d.properties.st_nm])))\n                  return tooltip.style(\"visibility\", \"hidden\");\n                })\n                .on(\"mousemove\", function(d){\n                  console.log(\"mov\",d.properties.st_nm);\n                  txt.text(d.properties.st_nm + \":\" + data[d.properties.st_nm])\n                  bg.attr(\"x\",()=>{ return window.event.pageX-835}).attr(\"y\",(d)=>{return window.event.pageY-200})\n                  .attr(\"width\",180).attr(\"height\",30).attr(\"fill\",\"silver\")\n                  \n                  txt.attr(\"x\",()=>{ return window.event.pageX-825}).attr(\"y\",(d)=>{return window.event.pageY-180})\n                  \n                \n                })\n                  \n\n    },[geographies])\n\n  return (\n    <div style={{width:\"60vw\",height:\"600\"}}>\n      <svg className=\"mapsvg\" width='60vw' height='600'>\n      <g className=\"countries\"> </g>\n    </svg>\n  </div>\n    \n  )\n}\n\nexport default WorldMap"]},"metadata":{},"sourceType":"module"}