{"ast":null,"code":"var _jsxFileName = \"/home/dhakad/Documents/AI/FF/Frontend_Test/src/components/login/AuthDataProvider.js\";\nimport React, { createContext, useState, useEffect, useMemo, useContext } from \"react\";\nimport Cookies from 'js-cookie';\nexport const AuthDataContext = createContext(null);\nconst initialAuthData = {};\n\nconst AuthDataProvider = props => {\n  const [authData, setAuthData] = useState(initialAuthData);\n  /* The first time the component is rendered, it tries to\n   * fetch the auth data from a source, like a cookie or\n   * the localStorage.\n   */\n\n  useEffect(() => {\n    const currentAuthData = Cookies.get('session');\n\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialAuthData);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo({ ...authData,\n    onLogin,\n    onLogout\n  }, [authData]);\n  return /*#__PURE__*/React.createElement(AuthDataContext.Provider, Object.assign({\n    value: authDataValue\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport const useAuthDataContext = () => useContext(AuthDataContext);\nexport default AuthDataProvider;","map":{"version":3,"sources":["/home/dhakad/Documents/AI/FF/Frontend_Test/src/components/login/AuthDataProvider.js"],"names":["React","createContext","useState","useEffect","useMemo","useContext","Cookies","AuthDataContext","initialAuthData","AuthDataProvider","props","authData","setAuthData","currentAuthData","get","onLogout","onLogin","newAuthData","authDataValue","useAuthDataContext"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,OAApD,EAA6DC,UAA7D,QAA+E,OAA/E;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,MAAMC,eAAe,GAAGN,aAAa,CAAC,IAAD,CAArC;AAEP,MAAMO,eAAe,GAAG,EAAxB;;AAEA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACM,eAAD,CAAxC;AAEA;;;;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,eAAe,GAAGP,OAAO,CAACQ,GAAR,CAAY,SAAZ,CAAxB;;AACA,QAAID,eAAJ,EAAqB;AACnBD,MAAAA,WAAW,CAACC,eAAD,CAAX;AACD;AACF,GALQ,EAKN,EALM,CAAT;;AAOA,QAAME,QAAQ,GAAG,MAAMH,WAAW,CAACJ,eAAD,CAAlC;;AAEA,QAAMQ,OAAO,GAAGC,WAAW,IAAIL,WAAW,CAACK,WAAD,CAA1C;;AAEA,QAAMC,aAAa,GAAGd,OAAO,CAAC,EAAE,GAAGO,QAAL;AAAeK,IAAAA,OAAf;AAAwBD,IAAAA;AAAxB,GAAD,EAAqC,CAACJ,QAAD,CAArC,CAA7B;AAEA,sBAAO,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEO;AAAjC,KAAoDR,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CArBD;;AAuBA,OAAO,MAAMS,kBAAkB,GAAG,MAAMd,UAAU,CAACE,eAAD,CAA3C;AAEP,eAAeE,gBAAf","sourcesContent":["\nimport React, { createContext, useState, useEffect, useMemo, useContext } from \"react\";\nimport Cookies from 'js-cookie';\n\nexport const AuthDataContext = createContext(null);\n\nconst initialAuthData = {};\n\nconst AuthDataProvider = props => {\n  const [authData, setAuthData] = useState(initialAuthData);\n\n  /* The first time the component is rendered, it tries to\n   * fetch the auth data from a source, like a cookie or\n   * the localStorage.\n   */\n  useEffect(() => {\n    const currentAuthData = Cookies.get('session');\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialAuthData);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo({ ...authData, onLogin, onLogout }, [authData]);\n\n  return <AuthDataContext.Provider value={authDataValue} {...props} />;\n};\n\nexport const useAuthDataContext = () => useContext(AuthDataContext);\n\nexport default AuthDataProvider;"]},"metadata":{},"sourceType":"module"}