{"ast":null,"code":"var _jsxFileName = \"/home/dhakad/Documents/AI/Frontend_Test/src/components/login/AuthDataProvider.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\n\nconst AuthDataProvider = props => {\n  const initialValue = {\n    session: false\n  };\n  const [authData, setAuthData] = useState(initialValue);\n  /* The first time the component is rendered, it tries to\n   * fetch the auth data from a source, like a cookie or\n   * the localStorage.\n   */\n\n  useEffect(() => {\n    const currentAuthData = initialValue.session; ///import from cookie\n\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n      initialValue.session = true;\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialValue);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo({ ...authData,\n    onLogin,\n    onLogout\n  }, [authData]);\n  return /*#__PURE__*/React.createElement(AuthDataContext.Provider, Object.assign({\n    value: authDataValue\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport const AuthDataContext = React.createContext(initialValue);\nexport default AuthDataProvider;","map":{"version":3,"sources":["/home/dhakad/Documents/AI/Frontend_Test/src/components/login/AuthDataProvider.js"],"names":["React","useState","useEffect","useMemo","AuthDataProvider","props","initialValue","session","authData","setAuthData","currentAuthData","onLogout","onLogin","newAuthData","authDataValue","AuthDataContext","createContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;;AAEA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,QAAMC,YAAY,GAAC;AAACC,IAAAA,OAAO,EAAC;AAAT,GAAnB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAACK,YAAD,CAAxC;AAEA;;;;;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,eAAe,GAAGJ,YAAY,CAACC,OAArC,CADc,CAC+B;;AAC7C,QAAIG,eAAJ,EAAqB;AACnBD,MAAAA,WAAW,CAACC,eAAD,CAAX;AACAJ,MAAAA,YAAY,CAACC,OAAb,GAAqB,IAArB;AACD;AACF,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMI,QAAQ,GAAG,MAAMF,WAAW,CAACH,YAAD,CAAlC;;AAEA,QAAMM,OAAO,GAAGC,WAAW,IAAIJ,WAAW,CAACI,WAAD,CAA1C;;AAEA,QAAMC,aAAa,GAAGX,OAAO,CAAC,EAAE,GAAGK,QAAL;AAAeI,IAAAA,OAAf;AAAwBD,IAAAA;AAAxB,GAAD,EAAqC,CAACH,QAAD,CAArC,CAA7B;AAEA,sBAAO,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEM;AAAjC,KAAoDT,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAvBD;;AAwBA,OAAO,MAAMU,eAAe,GAAGf,KAAK,CAACgB,aAAN,CAAoBV,YAApB,CAAxB;AACP,eAAeF,gBAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\n\nconst AuthDataProvider = props => {\n  const initialValue={session:false};\n  const [authData, setAuthData] = useState(initialValue);\n\n  /* The first time the component is rendered, it tries to\n   * fetch the auth data from a source, like a cookie or\n   * the localStorage.\n   */\n  useEffect(() => {\n    const currentAuthData = initialValue.session;///import from cookie\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n      initialValue.session=true;\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialValue);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo({ ...authData, onLogin, onLogout }, [authData]);\n\n  return <AuthDataContext.Provider value={authDataValue} {...props} />;\n};\nexport const AuthDataContext = React.createContext(initialValue);\nexport default AuthDataProvider;"]},"metadata":{},"sourceType":"module"}