{"ast":null,"code":"var _jsxFileName = \"/home/dhakad/Documents/AI/Frontend_Test/src/components/login/AuthDataProvider.js\";\nimport React from 'react';\nconst initialValue = {\n  session: false\n};\nexport const AuthDataContext = React.createContext(initialValue);\n\nconst AuthDataProvider = props => {\n  const [authData, setAuthData] = useState(initialAuthData);\n  /* The first time the component is rendered, it tries to\n   * fetch the auth data from a source, like a cookie or\n   * the localStorage.\n   */\n\n  useEffect(() => {\n    const currentAuthData = someManager.getAuthData();\n\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialAuthData);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo({ ...authData,\n    onLogin,\n    onLogout\n  }, [authData]);\n  return /*#__PURE__*/React.createElement(AuthDataContext.Provider, Object.assign({\n    value: authDataValue\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport const useAuthDataContext = () => useContext(AuthDataContext);\nexport default AuthDataProvider;","map":{"version":3,"sources":["/home/dhakad/Documents/AI/Frontend_Test/src/components/login/AuthDataProvider.js"],"names":["React","initialValue","session","AuthDataContext","createContext","AuthDataProvider","props","authData","setAuthData","useState","initialAuthData","useEffect","currentAuthData","someManager","getAuthData","onLogout","onLogin","newAuthData","authDataValue","useMemo","useAuthDataContext","useContext"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAC;AAACC,EAAAA,OAAO,EAAC;AAAT,CAAnB;AAEA,OAAO,MAAMC,eAAe,GAAGH,KAAK,CAACI,aAAN,CAAoBH,YAApB,CAAxB;;AAEP,MAAMI,gBAAgB,GAAGC,KAAK,IAAI;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BC,QAAQ,CAACC,eAAD,CAAxC;AAEA;;;;;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,eAAe,GAAGC,WAAW,CAACC,WAAZ,EAAxB;;AACA,QAAIF,eAAJ,EAAqB;AACnBJ,MAAAA,WAAW,CAACI,eAAD,CAAX;AACD;AACF,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMG,QAAQ,GAAG,MAAMP,WAAW,CAACE,eAAD,CAAlC;;AAEA,QAAMM,OAAO,GAAGC,WAAW,IAAIT,WAAW,CAACS,WAAD,CAA1C;;AAEA,QAAMC,aAAa,GAAGC,OAAO,CAAC,EAAE,GAAGZ,QAAL;AAAeS,IAAAA,OAAf;AAAwBD,IAAAA;AAAxB,GAAD,EAAqC,CAACR,QAAD,CAArC,CAA7B;AAEA,sBAAO,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEW;AAAjC,KAAoDZ,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CArBD;;AAuBA,OAAO,MAAMc,kBAAkB,GAAG,MAAMC,UAAU,CAAClB,eAAD,CAA3C;AAEP,eAAeE,gBAAf","sourcesContent":["import React from 'react'\n\nconst initialValue={session:false};\n\nexport const AuthDataContext = React.createContext(initialValue);\n\nconst AuthDataProvider = props => {\n  const [authData, setAuthData] = useState(initialAuthData);\n\n  /* The first time the component is rendered, it tries to\n   * fetch the auth data from a source, like a cookie or\n   * the localStorage.\n   */\n  useEffect(() => {\n    const currentAuthData = someManager.getAuthData();\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialAuthData);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo({ ...authData, onLogin, onLogout }, [authData]);\n\n  return <AuthDataContext.Provider value={authDataValue} {...props} />;\n};\n\nexport const useAuthDataContext = () => useContext(AuthDataContext);\n\nexport default AuthDataProvider;"]},"metadata":{},"sourceType":"module"}