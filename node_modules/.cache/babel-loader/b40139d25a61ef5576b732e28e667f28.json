{"ast":null,"code":"var _jsxFileName = \"/Users/deadman/Session-Management/frontend/src/components/login/register.jsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Cookies from 'js-cookie';\nimport history from \"./history\";\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error-msg\",\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }\n    }, props.message);\n  }\n\n  return null;\n} // export class Register extends React.Component {\n//   state = {\n//     username: '', usernameValid: false,\n//     email: '', emailValid: false,\n//     password: '', passwordValid: false,\n//     passwordConfirm: '', passwordConfirmValid: false,\n//     formValid: false,\n//     errorMsg: {}\n//   }\n// validateForm = () => {\n//   const {firstnameValid,lastnameValid , emailValid, passwordValid, passwordConfirmValid} = this.state;\n//   this.setState({\n//     formValid: firstnameValid && lastnameValid && emailValid && passwordValid && passwordConfirmValid\n//   })\n// }\n//   updateFirstname = (firstname) => {\n//     this.setState({firstname}, this.validateFirstname)\n//   }\n//  updateLastname = (lastname) => {\n//     this.setState({lastname}, this.validateLastname)\n//   }\n// validateFirstname = () => {\n//   const {firstname} = this.state;\n//   let firstnameValid = true;\n//   let errorMsg = {...this.state.errorMsg}\n//   if (firstname.length < 3) {\n//     firstnameValid = false;\n//     errorMsg.firstname = 'Must be at least 3 characters long'\n//   }\n//   this.setState({firstnameValid, errorMsg}, this.validateForm)\n// }\n//    validateLastname = () => {\n//     const {lastname} = this.state;\n//     let lastnameValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n//     if (lastname.length < 3) {\n//       lastnameValid = false;\n//       errorMsg.lastname = 'Must be at least 3 characters long'\n//     }\n//     this.setState({lastnameValid, errorMsg}, this.validateForm)\n//   }\n//    updateEmail = (email) => {\n//     this.setState({email}, this.validateEmail)\n//   }\n//   validateEmail = () => {\n//     const {email} = this.state;\n//     let emailValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n//     // checks for format _@_._\n//     if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){\n//       emailValid = false;\n//       errorMsg.email = 'Invalid email format'\n//     }\n//     this.setState({emailValid, errorMsg}, this.validateForm)\n//   }\n//   updatePassword = (password) => {\n//     this.setState({password}, this.validatePassword);\n//   }\n//   validatePassword = () => {\n//     const {password} = this.state;\n//     let passwordValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n//     // must be 6 charsclass App extends React.Component {\n// state = { \n//   firstName: '' ,\n//   LastName: '' ,\n//   phoneName: '' ,\n//   email: '' ,\n//   password: '', \n//   confirmPassword: '' \n// };\n// handleSubmit = async (event) => {\n//   event.preventDefault();\n//   // const resp = await axios.get(`https://www.google.com/search?q=${this.state.companyName}`);\n//   // this.props.onSubmit(resp.data);\n//   this.setState({ \n//     firstName: '' ,\n//     LastName: '' ,\n//     phoneName: '' ,\n//     email: '' ,\n//     password: '', \n//     confirmPassword: '' \n//   });\n// };\n//     // must contain a number\n//     // must contain a special character\n//     if (password.length < 6) {\n//       passwordValid = false;\n//       errorMsg.password = 'Password must be at least 6 characters long';\n//     } else if (!/\\d/.test(password)){\n//       passwordValid = false;\n//       errorMsg.password = 'Password must contain a digit';\n//     } else if (!/[!@#$%^&*]/.test(password)){\n//       passwordValid = false;\n//       errorMsg.password = 'Password must contain special character: !@#$%^&*';\n//     }\n//     this.setState({passwordValid, errorMsg}, this.validateForm);\n//   }\n//   updatePhone = (phone) => {\n//     this.setState({phone}, this.validatePhone);\n//   }\n//   validatePhone = () => {\n//     const {phone} = this.state;\n//     let phoneValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n//     // must be 10 chars\n//     // must be a number\n//     // must no contain a special character\n//      if (!/\\d/.test(phone)){\n//       phoneValid = false;\n//       errorMsg.phone = 'Phonenumber must not contain a letter';\n//     } else if (/[!@.#$%^&*]/.test(phone)){\n//       phoneValid = false;\n//       errorMsg.phone = 'Phonenumber must not contain special character: !@#$%^&*';\n//     }\n//     else if (phone.length > 10) {\n//       phoneValid = false;\n//       errorMsg.phone = 'Phonenumber Must have 10 digits only';\n//     } else if (!/\\d/.test(phone)){\n//       phoneValid = false;\n//       errorMsg.phone = 'Phonenumber must not contain a letter';\n//     }\n//     this.setState({phoneValid, errorMsg}, this.validateForm);\n//   }\n//   updatePasswordConfirm = (passwordConfirm) => {\n//     this.setState({passwordConfirm}, this.validatePasswordConfirm)\n//   }\n//   validatePasswordConfirm = () => {\n//     const {passwordConfirm, password} = this.state;\n//     let passwordConfirmValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n//     if (password !== passwordConfirm) {\n//       passwordConfirmValid = false;\n//       errorMsg.passwordConfirm = 'Passwords do not match'\n//     }\n//     this.setState({passwordConfirmValid, errorMsg}, this.validateForm);\n//   }\n\n\nexport class Register extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      firstname: '',\n      lastname: '',\n      phone: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      firstnameValid: false,\n      lastnameValid: false,\n      emailValid: false,\n      passwordValid: false,\n      passwordConfirmValid: false,\n      formValid: false,\n      errorMsg: {}\n    };\n\n    this.updateFirstName = firstname => {\n      this.setState({\n        firstname: firstname\n      });\n      this.validateFirstname(firstname);\n    };\n\n    this.updateLastName = lastname => {\n      this.setState({\n        lastname: lastname\n      });\n      this.validateLastname(lastname);\n    };\n\n    this.updatePhone = phone => {\n      this.setState({\n        phone: phone\n      });\n      this.validatePhone(phone);\n    };\n\n    this.validateForm = () => {\n      const {\n        firstnameValid,\n        lastnameValid,\n        emailValid,\n        passwordValid,\n        passwordConfirmValid\n      } = this.state;\n      this.setState({\n        formValid: firstnameValid && lastnameValid && emailValid && passwordValid && passwordConfirmValid\n      });\n    };\n\n    this.validateFirstname = firstname => {\n      // const {firstname} = this.state;\n      let firstnameValid = true;\n      let errorMsg = { ...this.state.errorMsg\n      };\n\n      if (firstname.length < 3) {\n        firstnameValid = false;\n        errorMsg.firstname = 'choose atleast 3 characters long';\n      }\n\n      this.setState({\n        firstnameValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.validateLastname = lastname => {\n      // const {firstname} = this.state;\n      let lastnameValid = true;\n      let errorMsg = { ...this.state.errorMsg\n      };\n\n      if (lastname.length < 3) {\n        lastnameValid = false;\n        errorMsg.lastname = 'choose atleast 3 characters long';\n      }\n\n      this.setState({\n        lastnameValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.validatePhone = phone => {\n      // const {firstname} = this.state;\n      let phoneValid = true;\n      let errorMsg = { ...this.state.errorMsg\n      };\n      let phoneno = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n\n      if (phone.match(phoneno)) {\n        if (phone.length < 10) {\n          phoneValid = false;\n          errorMsg.phone = 'Missing Phone Number';\n        }\n      } else {\n        phoneValid = false;\n        errorMsg.phone = 'Not a valid Phone Number';\n      }\n\n      this.setState({\n        phoneValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // const resp = await axios.get(`https://www.google.com/search?q=${this.state.companyName}`);\n      // this.props.onSubmit(resp.data);\n\n      this.setState({\n        firstname: '',\n        lastname: '',\n        phone: '',\n        email: '',\n        password: '',\n        passwordConfirm: ''\n      }); //   const headers = {\n      //     'Access-Control-Allow-Origin':'*',\n      //     'Content-Type':'application/json',\n      // }\n      // let axiosConfig = {\n      //     withCredentials: true,\n      //   }\n      //   const requestOptions = {\n      //     method: 'POST',\n      //     // headers:headers,\n      //     credentials: \"include\",\n      //     body: JSON.stringify(this.state)\n      // };\n\n      console.log(this.state);\n      axios.post('http://localhost:5000/register', this.state) // fetch('http://localhost:5000/Register',requestOptions)\n      // .then(res => res.json())\n      .then(res => {\n        // res = res.data\n        console.log(\"Verification\", res[\"verified\"]);\n\n        if (res[\"verified\"] === \"true\") {\n          const session_id = res[\"session-id\"];\n          console.log(\"dat\", session_id);\n          Cookies.set('session', session_id); // this.setState({ authenticated:true})\n          // history.push('/profile')\n          // this.context.history.push('/AI-Economics')\n\n          window.alert(\"registered succesfully\");\n          history.push('/profile');\n          console.log(\"registration done!\");\n        } else if (res[\"verified\"] === \"false\") {\n          console.log(res[\"error\"]);\n          window.alert(res[\"error\"]);\n          window.alert(res[\"error\"]);\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"base-container\",\n      ref: this.props.containerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      method: \"POST\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }\n    }, \"First Name\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.firstname,\n      onChange: event => this.updateFirstName(event.target.value) // onChange={event => this.validateFirstname(this.state.firstname)} /\n      ,\n      placeholder: \"Enter First Name\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(ValidationMessage, {\n      valid: this.state.firstnameValid,\n      message: this.state.errorMsg.firstname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }\n    }, \"Last Name\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.lastname,\n      onChange: event => this.updateLastName(event.target.value),\n      placeholder: \"Enter Last Name\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(ValidationMessage, {\n      valid: this.state.lastnameValid,\n      message: this.state.errorMsg.lastname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }\n    }, \"Phone Number\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.phone,\n      onChange: event => this.updatePhone(event.target.value),\n      placeholder: \"Enter Phone Number\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(ValidationMessage, {\n      valid: this.state.phoneValid,\n      message: this.state.errorMsg.phone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }\n    }, \"E-Mail Address\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.email,\n      onChange: event => this.setState({\n        email: event.target.value\n      }),\n      placeholder: \"Enter Email\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }\n    }, \"Password\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      label: \"name\",\n      value: this.state.password,\n      onChange: event => this.setState({\n        password: event.target.value\n      }),\n      placeholder: \"Enter Password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }\n    }, \"Confirm Password\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      label: \"name\",\n      value: this.state.passwordConfirm,\n      onChange: event => this.setState({\n        passwordConfirm: event.target.value\n      }),\n      placeholder: \"Enter Confirm Password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: () => this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }\n    }, \"Register\"))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/deadman/Session-Management/frontend/src/components/login/register.jsx"],"names":["React","axios","Cookies","history","ValidationMessage","props","valid","color","message","Register","Component","state","firstname","lastname","phone","email","password","passwordConfirm","firstnameValid","lastnameValid","emailValid","passwordValid","passwordConfirmValid","formValid","errorMsg","updateFirstName","setState","validateFirstname","updateLastName","validateLastname","updatePhone","validatePhone","validateForm","length","phoneValid","phoneno","match","handleSubmit","event","preventDefault","console","log","post","then","res","session_id","set","window","alert","push","render","containerRef","target","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAmB,WAAnB;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,MAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;AAChB,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAC;AAAP,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkDF,KAAK,CAACG,OAAxD,CADF;AAGD;;AACD,SAAO,IAAP;AACD,C,CAGD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEU;AACA;AACA;AACA;AACA;AACA;AAEV;AACA;AACA;AACA;AACA;AACA;AAEY;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACZ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,OAAO,MAAMC,QAAN,SAAuBT,KAAK,CAACU,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAC5CC,KAD4C,GACpC;AACNC,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,QAAQ,EAAE,EAFJ;AA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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nimport Cookies from 'js-cookie';\nimport history from\"./history\";\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return(\n      <div className='error-msg' style={{color:\"red\"}}>{props.message}</div>\n    )\n  }\n  return null;\n}\n\n\n// export class Register extends React.Component {\n  \n//   state = {\n//     username: '', usernameValid: false,\n//     email: '', emailValid: false,\n//     password: '', passwordValid: false,\n//     passwordConfirm: '', passwordConfirmValid: false,\n//     formValid: false,\n//     errorMsg: {}\n//   }\n\n          // validateForm = () => {\n          //   const {firstnameValid,lastnameValid , emailValid, passwordValid, passwordConfirmValid} = this.state;\n          //   this.setState({\n          //     formValid: firstnameValid && lastnameValid && emailValid && passwordValid && passwordConfirmValid\n          //   })\n          // }\n\n//   updateFirstname = (firstname) => {\n//     this.setState({firstname}, this.validateFirstname)\n//   }\n//  updateLastname = (lastname) => {\n//     this.setState({lastname}, this.validateLastname)\n//   }\n\n            // validateFirstname = () => {\n            //   const {firstname} = this.state;\n            //   let firstnameValid = true;\n            //   let errorMsg = {...this.state.errorMsg}\n\n            //   if (firstname.length < 3) {\n            //     firstnameValid = false;\n            //     errorMsg.firstname = 'Must be at least 3 characters long'\n            //   }\n\n            //   this.setState({firstnameValid, errorMsg}, this.validateForm)\n            // }\n//    validateLastname = () => {\n//     const {lastname} = this.state;\n//     let lastnameValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n\n//     if (lastname.length < 3) {\n//       lastnameValid = false;\n//       errorMsg.lastname = 'Must be at least 3 characters long'\n//     }\n\n//     this.setState({lastnameValid, errorMsg}, this.validateForm)\n//   }\n\n//    updateEmail = (email) => {\n//     this.setState({email}, this.validateEmail)\n//   }\n\n//   validateEmail = () => {\n//     const {email} = this.state;\n//     let emailValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n\n//     // checks for format _@_._\n//     if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){\n//       emailValid = false;\n//       errorMsg.email = 'Invalid email format'\n//     }\n\n//     this.setState({emailValid, errorMsg}, this.validateForm)\n//   }\n\n//   updatePassword = (password) => {\n//     this.setState({password}, this.validatePassword);\n//   }\n\n//   validatePassword = () => {\n//     const {password} = this.state;\n//     let passwordValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n\n//     // must be 6 charsclass App extends React.Component {\n  // state = { \n  //   firstName: '' ,\n  //   LastName: '' ,\n  //   phoneName: '' ,\n  //   email: '' ,\n  //   password: '', \n  //   confirmPassword: '' \n  // };\n  \n  \n  // handleSubmit = async (event) => {\n  //   event.preventDefault();\n  //   // const resp = await axios.get(`https://www.google.com/search?q=${this.state.companyName}`);\n  //   // this.props.onSubmit(resp.data);\n  //   this.setState({ \n  //     firstName: '' ,\n  //     LastName: '' ,\n  //     phoneName: '' ,\n  //     email: '' ,\n  //     password: '', \n  //     confirmPassword: '' \n  //   });\n  // };\n//     // must contain a number\n//     // must contain a special character\n\n//     if (password.length < 6) {\n//       passwordValid = false;\n//       errorMsg.password = 'Password must be at least 6 characters long';\n//     } else if (!/\\d/.test(password)){\n//       passwordValid = false;\n//       errorMsg.password = 'Password must contain a digit';\n//     } else if (!/[!@#$%^&*]/.test(password)){\n//       passwordValid = false;\n//       errorMsg.password = 'Password must contain special character: !@#$%^&*';\n//     }\n\n//     this.setState({passwordValid, errorMsg}, this.validateForm);\n//   }\n//   updatePhone = (phone) => {\n//     this.setState({phone}, this.validatePhone);\n//   }\n\n//   validatePhone = () => {\n//     const {phone} = this.state;\n//     let phoneValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n\n//     // must be 10 chars\n//     // must be a number\n//     // must no contain a special character\n\n    \n//      if (!/\\d/.test(phone)){\n//       phoneValid = false;\n//       errorMsg.phone = 'Phonenumber must not contain a letter';\n//     } else if (/[!@.#$%^&*]/.test(phone)){\n//       phoneValid = false;\n//       errorMsg.phone = 'Phonenumber must not contain special character: !@#$%^&*';\n//     }\n//     else if (phone.length > 10) {\n//       phoneValid = false;\n//       errorMsg.phone = 'Phonenumber Must have 10 digits only';\n//     } else if (!/\\d/.test(phone)){\n//       phoneValid = false;\n//       errorMsg.phone = 'Phonenumber must not contain a letter';\n//     }\n\n//     this.setState({phoneValid, errorMsg}, this.validateForm);\n//   }\n\n//   updatePasswordConfirm = (passwordConfirm) => {\n//     this.setState({passwordConfirm}, this.validatePasswordConfirm)\n//   }\n\n//   validatePasswordConfirm = () => {\n//     const {passwordConfirm, password} = this.state;\n//     let passwordConfirmValid = true;\n//     let errorMsg = {...this.state.errorMsg}\n\n//     if (password !== passwordConfirm) {\n//       passwordConfirmValid = false;\n//       errorMsg.passwordConfirm = 'Passwords do not match'\n//     }\n\n//     this.setState({passwordConfirmValid, errorMsg}, this.validateForm);\n//   }\n  \nexport class Register extends React.Component {\n  state = { \n    firstname: '' ,\n    lastname: '' ,\n    phone: '' ,\n    email: '' ,\n    password: '', \n    passwordConfirm: '',\n    firstnameValid:false,\n    lastnameValid:false,\n    emailValid:false,\n    passwordValid:false,\n    passwordConfirmValid:false,\n    formValid: false,\n    errorMsg:{}\n  };\n  \n  updateFirstName=(firstname) =>{\n    this.setState({ firstname: firstname })\n    this.validateFirstname(firstname)\n  }\n  updateLastName=(lastname) =>{\n    this.setState({ lastname: lastname })\n    this.validateLastname(lastname)\n  }\n  updatePhone=(phone) =>{\n    this.setState({ phone: phone })\n    this.validatePhone(phone)\n  }\n  // This is the old code pasted form top //\n\n\n  validateForm = () => {\n    const {firstnameValid,lastnameValid , emailValid, passwordValid, passwordConfirmValid} = this.state;\n    this.setState({\n      formValid: firstnameValid && lastnameValid && emailValid && passwordValid && passwordConfirmValid\n    })\n  }\n  validateFirstname = (firstname) => {\n    // const {firstname} = this.state;\n    let firstnameValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    if (firstname.length < 3) {\n      firstnameValid = false;\n      errorMsg.firstname = 'choose atleast 3 characters long'\n    }\n\n    this.setState({firstnameValid, errorMsg}, this.validateForm)\n  }\n  validateLastname = (lastname) => {\n    // const {firstname} = this.state;\n    let lastnameValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    if (lastname.length < 3) {\n      lastnameValid = false;\n      errorMsg.lastname = 'choose atleast 3 characters long'\n    }\n    this.setState({lastnameValid, errorMsg}, this.validateForm)\n  }\n validatePhone = (phone) => {\n    // const {firstname} = this.state;\n    let phoneValid = true;\n    let errorMsg = {...this.state.errorMsg}\n    let phoneno = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n      if(phone.match(phoneno))\n      {\n        if (phone.length < 10){\n          phoneValid=false;\n          errorMsg.phone = 'Missing Phone Number'\n        }\n      }\n      else\n      {\n         phoneValid  = false;\n         errorMsg.phone = 'Not a valid Phone Number'\n      }\n    this.setState({phoneValid, errorMsg}, this.validateForm)\n  }\n\n\n\n\n\n\n\n\n  \n  // <--------------------------------------- This is the old code pasted form top -----------------------------------------------> //\n\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    // const resp = await axios.get(`https://www.google.com/search?q=${this.state.companyName}`);\n    // this.props.onSubmit(resp.data);\n    this.setState({ \n      firstname: '' ,\n      lastname: '' ,    \n      phone: '' ,\n      email: '' ,\n      password: '', \n      passwordConfirm: '' \n    });\n  //   const headers = {\n  //     'Access-Control-Allow-Origin':'*',\n  //     'Content-Type':'application/json',\n  // }\n  // let axiosConfig = {\n  //     withCredentials: true,\n  //   }\n  //   const requestOptions = {\n  //     method: 'POST',\n  //     // headers:headers,\n  //     credentials: \"include\",\n  //     body: JSON.stringify(this.state)\n  // };\n    console.log(this.state)\n    axios.post('http://localhost:5000/register', this.state)\n    // fetch('http://localhost:5000/Register',requestOptions)\n    // .then(res => res.json())\n    .then(res=>{\n      // res = res.data\n      console.log(\"Verification\",res[\"verified\"])\n      if(res[\"verified\"] === \"true\"){\n        const session_id =res[\"session-id\"]\n        console.log(\"dat\",session_id)\n        Cookies.set('session', session_id)\n        // this.setState({ authenticated:true})\n        // history.push('/profile')\n        // this.context.history.push('/AI-Economics')\n        window.alert(\"registered succesfully\")\n\n        history.push('/profile')\n        console.log(\"registration done!\")\n        }\n        else if(res[\"verified\"] === \"false\"){\n          console.log(res[\"error\"])\n          window.alert(res[\"error\"])\n          window.alert(res[\"error\"])\n        }\n        \n    })\n  };\n\n  render() {\n    return (\n      <div className=\"base-container\" ref={this.props.containerRef}>\n        <div className=\"header\">Register</div>\n        <div className=\"content\">\n          <div className=\"form\">\n          <form onSubmit = {this.handleSubmit} method=\"POST\">\n            {/* <div className=\"splitname\">\n              <label htmlFor=\"username\">First Name</label>\n              < ValidationMessage valid={this.state.firstnameValid} message={this.state.errorMsg.firstname} />\n              <input type=\"text\" name=\"firstname\" placeholder=\"UserName\" required=\"true\" value={this.state.firstname} onChange={(e) => this.updateFirstname(e.target.value)}/>\n            </div> \n                <br/>\n              <div className=\"splitname\">\n              <label htmlFor=\"username\">Last Name</label>\n              < ValidationMessage valid={this.state.lastnameValid} message={this.state.errorMsg.lastname} />\n              <input type=\"text\" name=\"lastname\" placeholder=\"UserName\" required=\"true\" value={this.state.lastname} onChange={(e) => this.updateLastname(e.target.value)}/>\n            </div> \n                <br/>\n                <div className=\"form-group\">\n              <label htmlFor=\"email\">E-Mail</label>\n              < ValidationMessage valid={this.state.emailValid} message={this.state.errorMsg.email} />\n              <input type=\"text\" name=\"e-mail\" placeholder=\"E-Mail\" value={this.state.email} onChange={(e) => this.updateEmail(e.target.value)} />\n            </div> \n                <br/>\n                <div className=\"form-group\">\n              <label htmlFor=\"phone\">Phone-Number</label>\n               < ValidationMessage valid={this.state.phoneValid} message={this.state.errorMsg.phone} />\n              <input type=\"tel\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" name=\"phone\" placeholder=\"Phone-Number\" onChange={(e) => this.updatePhone(e.target.value)} /> \n            </div> \n                <br/>  \n                <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n               < ValidationMessage valid={this.state.passwordValid} message={this.state.errorMsg.password} />\n              <input type=\"password\" name=\"password\" placeholder=\"password\" value={this.state.password} onChange={(e) => this.updatePassword(e.target.value)} />\n            </div>\n                <br/>\n                 <div className=\"form-group\">\n              <label htmlFor=\"password-confirmation\">Confirm Password</label>\n              < ValidationMessage valid={this.state.passwordConfirmValid} message={this.state.errorMsg.passwordConfirm} />\n              <input type=\"password\" name=\"last-name\" placeholder=\"Last-Name\" value={this.state.passwordConfirm} onChange={(e) => this.updatePasswordConfirm(e.target.value)} />\n            </div> \n                <div className=\"footer\">\n          <button type=\"button\" className=\"btn\" disabled={!this.state.formValid}>\n            Register\n          </button>\n        </div> */}\n         <div className=\"forms\">\n        <label>\n          First Name\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.firstname}\n            onChange={event => this.updateFirstName(event.target.value)}\n            // onChange={event => this.validateFirstname(this.state.firstname)} /\n            placeholder=\"Enter First Name\" \n            required \n          />\n          </label>\n        < ValidationMessage valid={this.state.firstnameValid} message={this.state.errorMsg.firstname} />\n\n          </div>\n          <br />\n          <div className=\"forms\">\n        <label>\n          Last Name\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.lastname}\n            onChange={event => this.updateLastName(event.target.value)}\n            placeholder=\"Enter Last Name\" \n            required \n          />\n          </label>\n        < ValidationMessage valid={this.state.lastnameValid} message={this.state.errorMsg.lastname} />\n          </div>\n          <br />\n          <div className=\"forms\">\n        <label>\n          Phone Number\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.phone}\n            onChange={event => this.updatePhone(event.target.value)}\n            placeholder=\"Enter Phone Number\" \n            required \n          />\n          </label>\n        < ValidationMessage valid={this.state.phoneValid} message={this.state.errorMsg.phone} />\n          </div>\n          <br />\n          <div className=\"forms\">\n        <label>\n          E-Mail Address \n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.email}\n            onChange={event => this.setState({ email: event.target.value })}\n            placeholder=\"Enter Email\" \n            required \n          />\n          </label>\n          </div>\n          <br />\n          <div className=\"forms\">\n        <label>\n          Password\n          <input \n            type=\"password\" \n            label=\"name\"\n            value={this.state.password}\n            onChange={event => this.setState({ password: event.target.value })}\n            placeholder=\"Enter Password\" \n            required \n          />\n          </label>\n          </div>\n          <br />\n          <div className=\"forms\">\n        <label>\n          Confirm Password\n          <input \n            type=\"password\" \n            label=\"name\"\n            value={this.state.passwordConfirm}\n            onChange={event => this.setState({ passwordConfirm: event.target.value })}\n            placeholder=\"Enter Confirm Password\" \n            required \n          />\n          </label>\n          </div>\n          <br />\n          <div className=\"footer\">\n          <button className=\"btn\" onClick={()=> this.handleSubmit}  >Register</button>\n          </div>\n              </form> \n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}