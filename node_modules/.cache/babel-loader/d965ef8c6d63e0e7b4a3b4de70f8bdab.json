{"ast":null,"code":"var _jsxFileName = \"/home/dhakad/Documents/AI/Frontend_Test/src/components/login/AuthDataProvider.js\";\nimport React, { createContext, useState, useEffect, useMemo, useContext } from \"react\";\nexport const AuthDataContext = createContext(null);\nconst initialAuthData = {};\n\nconst AuthDataProvider = props => {\n  const [authData, setAuthData] = useState(initialAuthData);\n  /* The first time the component is rendered, it tries to\n   * fetch the auth data from a source, like a cookie or\n   * the localStorage.\n   */\n\n  useEffect(() => {\n    const currentAuthData = {};\n\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialAuthData);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo({ ...authData,\n    onLogin,\n    onLogout\n  }, [authData]);\n  return /*#__PURE__*/React.createElement(AuthDataContext.Provider, Object.assign({\n    value: authDataValue\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport const useAuthDataContext = () => useContext(AuthDataContext);\nexport default AuthDataProvider;","map":{"version":3,"sources":["/home/dhakad/Documents/AI/Frontend_Test/src/components/login/AuthDataProvider.js"],"names":["React","createContext","useState","useEffect","useMemo","useContext","AuthDataContext","initialAuthData","AuthDataProvider","props","authData","setAuthData","currentAuthData","onLogout","onLogin","newAuthData","authDataValue","useAuthDataContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,OAApD,EAA6DC,UAA7D,QAA+E,OAA/E;AAEA,OAAO,MAAMC,eAAe,GAAGL,aAAa,CAAC,IAAD,CAArC;AAEP,MAAMM,eAAe,GAAG,EAAxB;;AAEA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACK,eAAD,CAAxC;AAEA;;;;;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,eAAe,GAAE,EAAvB;;AACA,QAAIA,eAAJ,EAAqB;AACnBD,MAAAA,WAAW,CAACC,eAAD,CAAX;AACD;AACF,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMC,QAAQ,GAAG,MAAMF,WAAW,CAACJ,eAAD,CAAlC;;AAEA,QAAMO,OAAO,GAAGC,WAAW,IAAIJ,WAAW,CAACI,WAAD,CAA1C;;AAEA,QAAMC,aAAa,GAAGZ,OAAO,CAAC,EAAE,GAAGM,QAAL;AAAeI,IAAAA,OAAf;AAAwBD,IAAAA;AAAxB,GAAD,EAAqC,CAACH,QAAD,CAArC,CAA7B;AAEA,sBAAO,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEM;AAAjC,KAAoDP,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CArBD;;AAuBA,OAAO,MAAMQ,kBAAkB,GAAG,MAAMZ,UAAU,CAACC,eAAD,CAA3C;AAEP,eAAeE,gBAAf","sourcesContent":["import React, { createContext, useState, useEffect, useMemo, useContext } from \"react\";\n\nexport const AuthDataContext = createContext(null);\n\nconst initialAuthData = {};\n\nconst AuthDataProvider = props => {\n  const [authData, setAuthData] = useState(initialAuthData);\n\n  /* The first time the component is rendered, it tries to\n   * fetch the auth data from a source, like a cookie or\n   * the localStorage.\n   */\n  useEffect(() => {\n    const currentAuthData ={};\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialAuthData);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo({ ...authData, onLogin, onLogout }, [authData]);\n\n  return <AuthDataContext.Provider value={authDataValue} {...props} />;\n};\n\nexport const useAuthDataContext = () => useContext(AuthDataContext);\n\nexport default AuthDataProvider;"]},"metadata":{},"sourceType":"module"}